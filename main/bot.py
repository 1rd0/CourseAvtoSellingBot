# ./app/bot.py

import random
import pickle
import os
import logging
import traceback
from enum import Enum
from telegram import Update
from telegram.ext import ApplicationBuilder, CommandHandler, MessageHandler, filters, ContextTypes
import speech_recognition as sr
from gtts import gTTS
from pydub import AudioSegment
from dotenv import load_dotenv
from config import CONFIG
from sklearn.metrics.pairwise import cosine_similarity
from utils import clear_phrase, is_meaningful_text, extract_car_name, extract_car_category, extract_price, \
Stats, logger, lemmatize_phrase, analyze_sentiment
from rapidfuzz import process, fuzz

# –ó–∞–≥—Ä—É–∑–∫–∞ —Ç–æ–∫–µ–Ω–∞
load_dotenv()
TOKEN = os.getenv('TELEGRAM_TOKEN')

# –°–æ—Å—Ç–æ—è–Ω–∏—è –±–æ—Ç–∞
class BotState(Enum):
    NONE = "NONE"
    WAITING_FOR_CAR = "WAITING_FOR_CAR"
    WAITING_FOR_INTENT = "WAITING_FOR_INTENT"

# –ù–∞–º–µ—Ä–µ–Ω–∏—è
class Intent(Enum):
    HELLO = "hello"
    BYE = "bye"
    YES = "yes"
    NO = "no"
    CAR_TYPES = "car_types"
    CAR_PRICE = "car_price"
    CAR_AVAILABILITY = "car_availability"
    CAR_RECOMMENDATION = "car_recommendation"
    FILTER_CARS = "filter_cars"
    CAR_INFO = "car_info"
    BOOK_TEST_DRIVE = "book_test_drive"
    COMPARE_CARS = "compare_cars"

# –¢–∏–ø—ã –æ—Ç–≤–µ—Ç–æ–≤
class ResponseType(Enum):
    INTENT = "intent"
    GENERATE = "generate"
    FAILURE = "failure"

# –ö–ª–∞—Å—Å –±–æ—Ç–∞
class Bot:
    def __init__(self):
        """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –º–æ–¥–µ–ª–µ–π."""
        try:
            with open('models/intent_model.pkl', 'rb') as f:
                self.clf = pickle.load(f)
            with open('models/intent_vectorizer.pkl', 'rb') as f:
                self.vectorizer = pickle.load(f)
            with open('models/dialogues_vectorizer.pkl', 'rb') as f:
                self.tfidf_vectorizer = pickle.load(f)
            with open('models/dialogues_matrix.pkl', 'rb') as f:
                self.tfidf_matrix = pickle.load(f)
            with open('models/dialogues_answers.pkl', 'rb') as f:
                self.answers = pickle.load(f)
        except FileNotFoundError as e:
            logger.error(f"–ù–µ –Ω–∞–π–¥–µ–Ω—ã —Ñ–∞–π–ª—ã –º–æ–¥–µ–ª–∏: {e}\n{traceback.format_exc()}")
            raise

    def _update_context(self, context, replica, answer, intent=None):
        """–û–±–Ω–æ–≤–ª—è–µ—Ç –∫–æ–Ω—Ç–µ–∫—Å—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è."""
        context.user_data.setdefault('state', BotState.NONE.value)
        context.user_data.setdefault('current_car', None)
        context.user_data.setdefault('last_bot_response', None)
        context.user_data.setdefault('last_intent', None)
        context.user_data.setdefault('history', [])

        context.user_data['history'].append(replica)
        context.user_data['history'] = context.user_data['history'][-CONFIG['history_limit']:]
        context.user_data['last_bot_response'] = answer
        if intent:
            context.user_data['last_intent'] = intent

    def classify_intent(self, replica):
        """–ö–ª–∞—Å—Å–∏—Ñ–∏—Ü–∏—Ä—É–µ—Ç –Ω–∞–º–µ—Ä–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è."""
        replica_lemmatized = lemmatize_phrase(replica)
        if not replica_lemmatized:
            return None
        vectorized = self.vectorizer.transform([replica_lemmatized])
        intent = self.clf.predict(vectorized)[0]
        best_score = 0
        best_intent = None
        for intent_key, data in CONFIG['intents'].items():
            examples = [lemmatize_phrase(ex) for ex in data.get('examples', []) if lemmatize_phrase(ex)]
            if not examples:
                continue
            match = process.extractOne(replica_lemmatized, examples, scorer=fuzz.ratio)
            if match and match[1] / 100 > best_score and match[1] / 100 >= CONFIG['thresholds']['intent_score']:
                best_score = match[1] / 100
                best_intent = intent_key
        logger.info(
            f"Classify intent: replica='{replica_lemmatized}', predicted='{intent}', best_intent='{best_intent}', score={best_score}")
        return best_intent or intent if best_score >= CONFIG['thresholds']['intent_score'] else None

    def _get_car_response(self, intent, car_name, replica, context):
        """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –∑–∞–ø—Ä–æ—Å—ã, —Å–≤—è–∑–∞–Ω–Ω—ã–µ —Å –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã–º –∞–≤—Ç–æ–º–æ–±–∏–ª–µ–º."""
        if car_name not in CONFIG['cars']:
            return "–ò–∑–≤–∏–Ω–∏—Ç–µ, —Ç–∞–∫–æ–π –º–∞—à–∏–Ω—ã –Ω–µ—Ç –≤ –Ω–∞–ª–∏—á–∏–∏."
        responses = CONFIG['intents'][intent]['responses']
        answer = random.choice(responses)
        car_data = CONFIG['cars'][car_name]
        answer = answer.replace('[car_name]', car_name)
        answer = answer.replace('[price]', str(car_data['price']))
        answer = answer.replace('[description]', car_data.get('description', '–æ—Ç–ª–∏—á–Ω—ã–π –∞–≤—Ç–æ–º–æ–±–∏–ª—å'))

        sentiment = analyze_sentiment(replica)
        if sentiment == 'positive':
            answer += " –†–∞–¥, —á—Ç–æ –≤–∞–º –Ω—Ä–∞–≤–∏—Ç—Å—è! üòä"
        elif sentiment == 'negative':
            answer += " –ö–∞–∂–µ—Ç—Å—è, –≤—ã —Å–æ–º–Ω–µ–≤–∞–µ—Ç–µ—Å—å. –ú–æ–∂–µ—Ç, —Ç–µ—Å—Ç-–¥—Ä–∞–π–≤ –ø–æ–º–æ–∂–µ—Ç? üòä"

        return f"{answer} –ß—Ç–æ –µ—â—ë –∏–Ω—Ç–µ—Ä–µ—Å—É–µ—Ç?"

    def _find_car_by_context(self, replica, context):
        """–ò—â–µ—Ç –∞–≤—Ç–æ–º–æ–±–∏–ª—å –Ω–∞ –æ—Å–Ω–æ–≤–µ –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞ –∏–ª–∏ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏."""
        last_response = context.user_data.get('last_bot_response', '')
        last_intent = context.user_data.get('last_intent', '')
        car_category = extract_car_category(replica)

        if last_response and '–ö—Å—Ç–∞—Ç–∏, —É –Ω–∞—Å –µ—Å—Ç—å' in last_response:
            return extract_car_name(last_response)
        elif car_category:
            suitable_cars = [car for car, data in CONFIG['cars'].items() if car_category in data.get('categories', [])]
            return random.choice(suitable_cars) if suitable_cars else None
        elif last_intent == Intent.CAR_TYPES.value:
            for hist in context.user_data.get('history', [])[::-1]:
                hist_car = extract_car_name(hist)
                if hist_car:
                    return hist_car
                hist_category = extract_car_category(hist)
                if hist_category:
                    suitable_cars = [car for car, data in CONFIG['cars'].items() if
                                     hist_category in data.get('categories', [])]
                    if suitable_cars:
                        return random.choice(suitable_cars)
        return None

    def _handle_filter_cars(self, price, car_category, context):
        """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏—é –∞–≤—Ç–æ–º–æ–±–∏–ª–µ–π –ø–æ —Ü–µ–Ω–µ –∏ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏."""
        suitable_cars = [
            car for car, data in CONFIG['cars'].items()
            if (not price or data['price'] <= price)
            and (not car_category or car_category in data.get('categories', []))
        ]
        recent_cars = [extract_car_name(h) for h in context.user_data.get('history', [])]
        suitable_cars = [c for c in suitable_cars if c not in recent_cars]

        if not suitable_cars:
            conditions = []
            if price:
                conditions.append(f"–¥–æ {price} —Ä—É–±–ª–µ–π")
            if car_category:
                conditions.append(f"–≤ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ {car_category}")
            return f"–ò–∑–≤–∏–Ω–∏—Ç–µ, –Ω–µ—Ç –º–∞—à–∏–Ω –¥–ª—è {', '.join(conditions)}."

        cars_list = ', '.join(suitable_cars)
        if not price and not car_category:
            car_name = random.choice(suitable_cars)
            context.user_data['current_car'] = car_name
            context.user_data['state'] = BotState.WAITING_FOR_INTENT.value
            return f"–°–æ–≤–µ—Ç—É—é {car_name}! –•–æ—Ç–∏—Ç–µ —É–∑–Ω–∞—Ç—å —Ü–µ–Ω—É –∏–ª–∏ —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫–∏?"
        return f"–í–æ—Ç —á—Ç–æ –Ω–∞—à–ª–æ—Å—å: {cars_list}."

    def get_answer_by_intent(self, intent, replica, context):
        """–ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç –æ—Ç–≤–µ—Ç –Ω–∞ –æ—Å–Ω–æ–≤–µ –Ω–∞–º–µ—Ä–µ–Ω–∏—è."""
        car_name = context.user_data.get('current_car')
        last_intent = context.user_data.get('last_intent', '')
        car_category = extract_car_category(replica)
        price = extract_price(replica)

        if intent not in CONFIG['intents']:
            return None
        responses = CONFIG['intents'][intent]['responses']
        if not responses:
            return None
        answer = random.choice(responses)

        sentiment = analyze_sentiment(replica)
        sentiment_suffix = ""
        if sentiment == 'positive':
            sentiment_suffix = " –†–∞–¥, —á—Ç–æ –≤—ã –≤ —Ö–æ—Ä–æ—à–µ–º –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∏–∏! üòä"
        elif sentiment == 'negative':
            sentiment_suffix = " –ö–∞–∂–µ—Ç—Å—è, –≤—ã –Ω–µ –≤ –¥—É—Ö–µ. –î–∞–≤–∞–π—Ç–µ –ø–æ–¥–±–µ—Ä–µ–º –∞–≤—Ç–æ! üòä"

        if intent in [Intent.CAR_PRICE.value, Intent.CAR_AVAILABILITY.value, Intent.CAR_INFO.value,
                      Intent.BOOK_TEST_DRIVE.value]:
            if not car_name:
                car_name = self._find_car_by_context(replica, context)
                if car_name:
                    context.user_data['current_car'] = car_name
                    context.user_data['state'] = BotState.WAITING_FOR_INTENT.value
                    return f"–ò–∑ {car_category or '–∞–≤—Ç–æ'} –µ—Å—Ç—å {car_name}. –•–æ—Ç–∏—Ç–µ —É–∑–Ω–∞—Ç—å —Ü–µ–Ω—É, —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫–∏ –∏–ª–∏ –∑–∞–ø–∏—Å–∞—Ç—å—Å—è –Ω–∞ —Ç–µ—Å—Ç?{sentiment_suffix}"
                context.user_data['state'] = BotState.WAITING_FOR_CAR.value
                return f"–ö–∞–∫—É—é –º–∞—à–∏–Ω—É –∏–ª–∏ –∫–∞—Ç–µ–≥–æ—Ä–∏—é –≤—ã –∏–º–µ–µ—Ç–µ –≤ –≤–∏–¥—É?{sentiment_suffix}"
            return self._get_car_response(intent, car_name, replica, context)

        elif intent == Intent.CAR_RECOMMENDATION.value:
            answer = self._handle_filter_cars(None, car_category, context)

        elif intent == Intent.FILTER_CARS.value:
            if price or car_category:
                answer = self._handle_filter_cars(price, car_category, context)
            else:
                return f"–£–∫–∞–∂–∏—Ç–µ —Ü–µ–Ω—É –∏–ª–∏ –∫–∞—Ç–µ–≥–æ—Ä–∏—é –¥–ª—è —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–∏.{sentiment_suffix}"

        elif intent == Intent.CAR_TYPES.value:
            categories = random.sample([cat for car in CONFIG['cars'].values() for cat in car.get('categories', [])],
                                       min(3, len(CONFIG['cars'])))
            cars = random.sample(list(CONFIG['cars'].keys()), min(2, len(CONFIG['cars'])))
            answer = f"–£ –Ω–∞—Å –µ—Å—Ç—å {', '.join(set(categories))} –∏ –º–æ–¥–µ–ª–∏ –≤—Ä–æ–¥–µ {', '.join(cars)}. –ß—Ç–æ –∏–Ω—Ç–µ—Ä–µ—Å–Ω–æ?{sentiment_suffix}"
            context.user_data['current_car'] = None

        elif intent == Intent.COMPARE_CARS.value:
            car1 = random.choice(list(CONFIG['cars'].keys()))
            car2 = random.choice([c for c in CONFIG['cars'].keys() if c != car1])
            answer = answer.replace('[car1]', car1).replace('[car2]', car2)
            context.user_data['current_car'] = car1
            answer += f" –ß—Ç–æ –∏–Ω—Ç–µ—Ä–µ—Å—É–µ—Ç: {car1} –∏–ª–∏ {car2}?{sentiment_suffix}"

        elif intent == Intent.YES.value:
            if last_intent == Intent.HELLO.value:
                categories = random.sample(
                    [cat for car in CONFIG['cars'].values() for cat in car.get('categories', [])],
                    min(3, len(CONFIG['cars'])))
                answer = f"–û—Ç–ª–∏—á–Ω–æ! –£ –Ω–∞—Å –µ—Å—Ç—å {', '.join(set(categories))}. –ß—Ç–æ —Ö–æ—Ç–∏—Ç–µ —É–∑–Ω–∞—Ç—å?{sentiment_suffix}"
            elif last_intent in [Intent.CAR_PRICE.value, Intent.CAR_INFO.value, Intent.CAR_AVAILABILITY.value,
                                 Intent.BOOK_TEST_DRIVE.value]:
                if car_name:
                    answer = f"–¶–µ–Ω–∞ –Ω–∞ {car_name} ‚Äî {CONFIG['cars'][car_name]['price']} —Ä—É–±–ª–µ–π. –ß—Ç–æ –µ—â—ë –∏–Ω—Ç–µ—Ä–µ—Å—É–µ—Ç?{sentiment_suffix}"
                else:
                    answer = f"–ù–∞–∑–æ–≤–∏ –º–∞—à–∏–Ω—É, —á—Ç–æ–±—ã —è —Ä–∞—Å—Å–∫–∞–∑–∞–ª –ø–æ–¥—Ä–æ–±–Ω–µ–µ!{sentiment_suffix}"
            elif last_intent == Intent.CAR_TYPES.value:
                cars = random.sample(list(CONFIG['cars'].keys()), min(2, len(CONFIG['cars'])))
                answer = f"–£ –Ω–∞—Å –µ—Å—Ç—å {', '.join(cars)}. –ù–∞–∑–æ–≤–∏ –æ–¥–Ω—É, —á—Ç–æ–±—ã —É–∑–Ω–∞—Ç—å –±–æ–ª—å—à–µ!{sentiment_suffix}"
            elif last_intent == 'offtopic':
                answer = f"–•–æ—Ä–æ—à–æ, –¥–∞–≤–∞–π –ø—Ä–æ–¥–æ–ª–∂–∏–º! –•–æ—á–µ—à—å —É–∑–Ω–∞—Ç—å –ø—Ä–æ –∞–≤—Ç–æ?{sentiment_suffix}"
            else:
                answer = f"–•–æ—Ä–æ—à–æ, —á—Ç–æ –∏–Ω—Ç–µ—Ä–µ—Å—É–µ—Ç? –ú–æ–¥–µ–ª–∏, —Ü–µ–Ω—ã –∏–ª–∏ —Ç–µ—Å—Ç-–¥—Ä–∞–π–≤?{sentiment_suffix}"

        elif intent == Intent.NO.value:
            context.user_data['current_car'] = None
            context.user_data['state'] = BotState.NONE.value
            answer = f"–•–æ—Ä–æ—à–æ, –∫–∞–∫—É—é –º–∞—à–∏–Ω—É –æ–±—Å—É–¥–∏–º —Ç–µ–ø–µ—Ä—å?{sentiment_suffix}"

        if intent in [Intent.HELLO.value, Intent.CAR_TYPES.value] and random.random() < 0.2:
            ad_car = random.choice([c for c in CONFIG['cars'].keys() if c != car_name])
            answer += f" –ö—Å—Ç–∞—Ç–∏, —É –Ω–∞—Å –µ—Å—Ç—å {ad_car} ‚Äî –æ—Ç–ª–∏—á–Ω—ã–π –≤—ã–±–æ—Ä!{sentiment_suffix}"

        context.user_data['last_intent'] = intent
        return answer

    def generate_answer(self, replica, context):
        """–ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç –æ—Ç–≤–µ—Ç –Ω–∞ –æ—Å–Ω–æ–≤–µ –¥–∏–∞–ª–æ–≥–æ–≤."""
        replica_lemmatized = lemmatize_phrase(replica)
        if not replica_lemmatized or not self.answers:
            return None
        if not is_meaningful_text(replica):
            return None
        replica_vector = self.tfidf_vectorizer.transform([replica_lemmatized])
        similarities = cosine_similarity(replica_vector, self.tfidf_matrix).flatten()
        best_idx = similarities.argmax()
        if similarities[best_idx] > CONFIG['thresholds']['dialogues_similarity']:
            answer = self.answers[best_idx]
            logger.info(
                f"Found in dialogues.txt: replica='{replica_lemmatized}', answer='{answer}', similarity={similarities[best_idx]}")
            sentiment = analyze_sentiment(replica)
            if sentiment == 'positive':
                answer += " –†–∞–¥, —á—Ç–æ —Ç—ã –≤ —Ö–æ—Ä–æ—à–µ–º –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∏–∏! üòä"
            elif sentiment == 'negative':
                answer += " –ö–∞–∂–µ—Ç—Å—è, —Ç—ã –Ω–µ –≤ –¥—É—Ö–µ. –ú–æ–∂–µ—Ç, –Ω–æ–≤—ã–π –∞–≤—Ç–æ –ø–æ–¥–Ω–∏–º–µ—Ç –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∏–µ? üòä"
            if random.random() < 0.3:
                ad_car = random.choice(list(CONFIG['cars'].keys()))
                answer += f" –ö—Å—Ç–∞—Ç–∏, —É –Ω–∞—Å –µ—Å—Ç—å {ad_car} ‚Äî –æ—Ç–ª–∏—á–Ω—ã–π –≤—ã–±–æ—Ä!"
            context.user_data['last_intent'] = 'offtopic'
            return answer
        logger.info(f"No match in dialogues.txt for replica='{replica_lemmatized}'")
        return None

    def get_failure_phrase(self, replica):
        """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Ñ—Ä–∞–∑—É –ø—Ä–∏ –Ω–µ—É–¥–∞—á–Ω–æ–º –∑–∞–ø—Ä–æ—Å–µ —Å —É—á–µ—Ç–æ–º —Ç–æ–Ω–∞–ª—å–Ω–æ—Å—Ç–∏."""
        car_name = random.choice(list(CONFIG['cars'].keys()))
        answer = random.choice(CONFIG['failure_phrases']).replace('[car_name]', car_name)
        sentiment = analyze_sentiment(replica)
        if sentiment == 'positive':
            answer += " –¢—ã –≤ –æ—Ç–ª–∏—á–Ω–æ–º –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∏–∏, –¥–∞–≤–∞–π –Ω–∞–π–¥–µ–º –º–∞—à–∏–Ω—É! üòä"
        elif sentiment == 'negative':
            answer += " –ù–µ –ø–µ—Ä–µ–∂–∏–≤–∞–π, –ø–æ–¥–±–µ—Ä–µ–º –∞–≤—Ç–æ –¥–ª—è —Ç–µ–±—è! üòä"
        return answer

    def _process_none_state(self, replica, context):
        """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç —Å–æ—Å—Ç–æ—è–Ω–∏–µ NONE."""
        car_name = extract_car_name(replica)
        if car_name:
            context.user_data['current_car'] = car_name
            context.user_data['state'] = BotState.WAITING_FOR_INTENT.value
            sentiment = analyze_sentiment(replica)
            suffix = " –†–∞–¥, —á—Ç–æ —Ç—ã –≤ —Ö–æ—Ä–æ—à–µ–º –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∏–∏! üòä" if sentiment == 'positive' else " –ö–∞–∂–µ—Ç—Å—è, —Ç—ã –Ω–µ –≤ –¥—É—Ö–µ. –î–∞–≤–∞–π –Ω–∞–π–¥–µ–º –∞–≤—Ç–æ? üòä" if sentiment == 'negative' else ""
            return f"–í—ã –∏–º–µ–µ—Ç–µ –≤ –≤–∏–¥—É {car_name}? –•–æ—Ç–∏—Ç–µ —É–∑–Ω–∞—Ç—å —Ü–µ–Ω—É, —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫–∏ –∏–ª–∏ —Ç–µ—Å—Ç-–¥—Ä–∞–π–≤?{suffix}"

        car_category = extract_car_category(replica)
        if car_category:
            suitable_cars = [car for car, data in CONFIG['cars'].items() if car_category in data.get('categories', [])]
            if suitable_cars:
                car_name = random.choice(suitable_cars)
                context.user_data['current_car'] = car_name
                context.user_data['state'] = BotState.WAITING_FOR_INTENT.value
                sentiment = analyze_sentiment(replica)
                suffix = " –¢—ã –≤ –æ—Ç–ª–∏—á–Ω–æ–º –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∏–∏, –¥–∞–≤–∞–π –ø—Ä–æ–¥–æ–ª–∂–∏–º! üòä" if sentiment == 'positive' else " –ù–µ –≥—Ä—É—Å—Ç–∏, –Ω–∞–π–¥–µ–º –º–∞—à–∏–Ω—É! üòä" if sentiment == 'negative' else ""
                return f"–ò–∑ {car_category} –µ—Å—Ç—å {car_name}. –•–æ—Ç–∏—Ç–µ —É–∑–Ω–∞—Ç—å —Ü–µ–Ω—É, —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫–∏ –∏–ª–∏ —Ç–µ—Å—Ç-–¥—Ä–∞–π–≤?{suffix}"
            sentiment = analyze_sentiment(replica)
            suffix = " –í —Ö–æ—Ä–æ—à–µ–º –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∏–∏? –î–∞–≤–∞–π –ø–æ–ø—Ä–æ–±—É–µ–º –¥—Ä—É–≥—É—é –∫–∞—Ç–µ–≥–æ—Ä–∏—é! üòä" if sentiment == 'positive' else " –ù–µ –ø–µ—Ä–µ–∂–∏–≤–∞–π, –ø–æ–ø—Ä–æ–±—É–µ–º –¥—Ä—É–≥—É—é –∫–∞—Ç–µ–≥–æ—Ä–∏—é! üòä" if sentiment == 'negative' else ""
            return f"–£ –Ω–∞—Å –Ω–µ—Ç –º–∞—à–∏–Ω –≤ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ {car_category}. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –¥—Ä—É–≥—É—é –∫–∞—Ç–µ–≥–æ—Ä–∏—é!{suffix}"

        intent = self.classify_intent(replica)
        if intent:
            return self.get_answer_by_intent(intent, replica, context)

        return self.generate_answer(replica, context) or self.get_failure_phrase(replica)

    def _process_waiting_for_car(self, replica, context):
        """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç —Å–æ—Å—Ç–æ—è–Ω–∏–µ WAITING_FOR_CAR."""
        car_name = extract_car_name(replica)
        if car_name:
            context.user_data['current_car'] = car_name
            context.user_data['state'] = BotState.WAITING_FOR_INTENT.value
            sentiment = analyze_sentiment(replica)
            suffix = " –û—Ç–ª–∏—á–Ω–æ–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∏–µ, –¥–∞? üòä" if sentiment == 'positive' else " –î–∞–≤–∞–π –Ω–∞–π–¥–µ–º —á—Ç–æ-—Ç–æ –ø–æ–¥—Ö–æ–¥—è—â–µ–µ! üòä" if sentiment == 'negative' else ""
            return f"–í—ã –∏–º–µ–µ—Ç–µ –≤ –≤–∏–¥—É {car_name}? –•–æ—Ç–∏—Ç–µ —É–∑–Ω–∞—Ç—å —Ü–µ–Ω—É, —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫–∏ –∏–ª–∏ —Ç–µ—Å—Ç-–¥—Ä–∞–π–≤?{suffix}"
        car_category = extract_car_category(replica)
        if car_category:
            suitable_cars = [car for car, data in CONFIG['cars'].items() if car_category in data.get('categories', [])]
            if suitable_cars:
                car_name = random.choice(suitable_cars)
                context.user_data['current_car'] = car_name
                context.user_data['state'] = BotState.WAITING_FOR_INTENT.value
                sentiment = analyze_sentiment(replica)
                suffix = " –í —Ö–æ—Ä–æ—à–µ–º —Ä–∞—Å–ø–æ–ª–æ–∂–µ–Ω–∏–∏ –¥—É—Ö–∞? üòä" if sentiment == 'positive' else " –ù–µ –≥—Ä—É—Å—Ç–∏, –Ω–∞–π–¥–µ–º –∞–≤—Ç–æ! üòä" if sentiment == 'negative' else ""
                return f"–ò–∑ {car_category} –µ—Å—Ç—å {car_name}. –•–æ—Ç–∏—Ç–µ —É–∑–Ω–∞—Ç—å —Ü–µ–Ω—É, —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫–∏ –∏–ª–∏ —Ç–µ—Å—Ç-–¥—Ä–∞–π–≤?{suffix}"
        sentiment = analyze_sentiment(replica)
        suffix = " –û—Ç–ª–∏—á–Ω–æ, –¥–∞–≤–∞–π –ø—Ä–æ–¥–æ–ª–∂–∏–º! üòä" if sentiment == 'positive' else " –ù–µ –ø–µ—Ä–µ–∂–∏–≤–∞–π, —É—Ç–æ—á–Ω–∏–º! üòä" if sentiment == 'negative' else ""
        return f"–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —É—Ç–æ—á–Ω–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –º–∞—à–∏–Ω—ã –∏–ª–∏ –∫–∞—Ç–µ–≥–æ—Ä–∏—é.{suffix}"

    def _process_waiting_for_intent(self, replica, context):
        """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç —Å–æ—Å—Ç–æ—è–Ω–∏–µ WAITING_FOR_INTENT."""
        car_name = extract_car_name(replica)
        if car_name and car_name in CONFIG['cars']:
            context.user_data['current_car'] = car_name
        else:
            car_name = context.user_data.get('current_car', '–º–∞—à–∏–Ω—É')

        intent = self.classify_intent(replica)
        if intent in [Intent.CAR_PRICE.value, Intent.CAR_AVAILABILITY.value, Intent.CAR_INFO.value,
                      Intent.BOOK_TEST_DRIVE.value]:
            context.user_data['state'] = BotState.NONE.value
            return self._get_car_response(intent, car_name, replica, context)
        if intent == Intent.YES.value:
            if last_intent == Intent.HELLO.value:
                categories = random.sample(
                    [cat for car in CONFIG['cars'].values() for cat in car.get('categories', [])],
                    min(3, len(CONFIG['cars'])))
                answer = f"–û—Ç–ª–∏—á–Ω–æ! –£ –Ω–∞—Å –µ—Å—Ç—å {', '.join(set(categories))}. –ß—Ç–æ —Ö–æ—Ç–∏—Ç–µ —É–∑–Ω–∞—Ç—å?{sentiment_suffix}"
            elif last_intent in [Intent.CAR_PRICE.value, Intent.CAR_INFO.value, Intent.CAR_AVAILABILITY.value,
                                 Intent.BOOK_TEST_DRIVE.value]:
                if car_name:
                    context.user_data['state'] = BotState.NONE.value
                    sentiment = analyze_sentiment(replica)
                    suffix = " –†–∞–¥ —Ç–≤–æ–µ–º—É –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∏—é! üòä" if sentiment == 'positive' else " –î–∞–≤–∞–π –ø–æ–¥–Ω–∏–º–µ–º –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∏–µ! üòä" if sentiment == 'negative' else ""
                    return f"–¶–µ–Ω–∞ –Ω–∞ {car_name} ‚Äî {CONFIG['cars'][car_name]['price']} —Ä—É–±–ª–µ–π. –ß—Ç–æ –µ—â—ë –∏–Ω—Ç–µ—Ä–µ—Å—É–µ—Ç?{suffix}"
        if intent == Intent.NO.value:
            context.user_data['current_car'] = None
            context.user_data['state'] = BotState.NONE.value
            sentiment = analyze_sentiment(replica)
            suffix = " –û—Ç–ª–∏—á–Ω–æ, –ø—Ä–æ–¥–æ–ª–∂–∞–µ–º! üòä" if sentiment == 'positive' else " –ù–µ –≥—Ä—É—Å—Ç–∏, –Ω–∞–π–¥–µ–º –¥—Ä—É–≥–æ–µ! üòä" if sentiment == 'negative' else ""
            return f"–•–æ—Ä–æ—à–æ, –∫–∞–∫—É—é –º–∞—à–∏–Ω—É –æ–±—Å—É–¥–∏–º —Ç–µ–ø–µ—Ä—å?{suffix}"
        sentiment = analyze_sentiment(replica)
        suffix = " –í —Ö–æ—Ä–æ—à–µ–º –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∏–∏? üòä" if sentiment == 'positive' else " –ù–µ –ø–µ—Ä–µ–∂–∏–≤–∞–π, –Ω–∞–π–¥–µ–º —á—Ç–æ-—Ç–æ –ø–æ–¥—Ö–æ–¥—è—â–µ–µ! üòä" if sentiment == 'negative' else ""
        return f"–ß—Ç–æ —Ö–æ—Ç–∏—Ç–µ —É–∑–Ω–∞—Ç—å –ø—Ä–æ {car_name}: —Ü–µ–Ω—É, —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫–∏ –∏–ª–∏ —Ç–µ—Å—Ç-–¥—Ä–∞–π–≤?{suffix}"

    def process(self, replica, context):
        """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –∑–∞–ø—Ä–æ—Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è."""
        stats = Stats(context)
        if not is_meaningful_text(replica):
            answer = self.get_failure_phrase(replica)
            self._update_context(context, replica, answer)
            stats.add(ResponseType.FAILURE.value, replica, answer, context)
            return answer

        price = extract_price(replica)
        car_category = extract_car_category(replica)
        if price:
            answer = self._handle_filter_cars(price, car_category, context)
            self._update_context(context, replica, answer, Intent.FILTER_CARS.value)
            stats.add(ResponseType.INTENT.value, replica, answer, context)
            return answer

        state = context.user_data.get('state', BotState.NONE.value)
        logger.info(
            f"Processing: replica='{replica}', state='{state}', last_intent='{context.user_data.get('last_intent')}'")

        if state == BotState.WAITING_FOR_CAR.value:
            answer = self._process_waiting_for_car(replica, context)
        elif state == BotState.WAITING_FOR_INTENT.value:
            answer = self._process_waiting_for_intent(replica, context)
        else:
            answer = self._process_none_state(replica, context)

        self._update_context(context, replica, answer)
        stats.add(ResponseType.INTENT.value if self.classify_intent(
                      replica) else ResponseType.GENERATE.value if 'dialogues.txt' in answer else ResponseType.FAILURE.value,
                  replica, answer, context)
        return answer

# –ì–æ–ª–æ—Å –≤ —Ç–µ–∫—Å—Ç
def voice_to_text(voice_file):
    recognizer = sr.Recognizer()
    try:
        import signal
        def signal_handler(signum, frame):
            raise TimeoutError("Speech recognition timed out")

        signal.signal(signal.SIGALRM, signal_handler)
        signal.alarm(5)  # –¢–∞–π–º–∞—É—Ç 5 —Å–µ–∫—É–Ω–¥
        audio = AudioSegment.from_ogg(voice_file)
        audio.export('voice.wav', format='wav')
        with sr.AudioFile('voice.wav') as source:
            audio_data = recognizer.record(source)
        text = recognizer.recognize_google(audio_data, language='ru-RU')
        return text
    except (sr.UnknownValueError, sr.RequestError, TimeoutError, Exception) as e:
        logger.error(f"–û—à–∏–±–∫–∞ —Ä–∞—Å–ø–æ–∑–Ω–∞–≤–∞–Ω–∏—è –≥–æ–ª–æ—Å–∞: {e}\n{traceback.format_exc()}")
        return None
    finally:
        signal.alarm(0)
        if os.path.exists('voice.wav'):
            os.remove('voice.wav')

# –¢–µ–∫—Å—Ç –≤ –≥–æ–ª–æ—Å
def text_to_voice(text):
    if not text:
        return None
    try:
        tts = gTTS(text=text, lang='ru')
        voice_file = 'response.mp3'
        tts.save(voice_file)
        return voice_file
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ —Å–∏–Ω—Ç–µ–∑–∞ —Ä–µ—á–∏: {e}\n{traceback.format_exc()}")
        return None

# Telegram-–æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏
async def start_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    answer = CONFIG['start_message']
    context.user_data['last_bot_response'] = answer
    context.user_data['last_intent'] = Intent.HELLO.value
    await update.message.reply_text(answer)

async def help_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    answer = CONFIG['help_message']
    context.user_data['last_bot_response'] = answer
    context.user_data['last_intent'] = 'help'
    await update.message.reply_text(answer)

async def stats_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    stats = context.user_data.get('stats', {ResponseType.INTENT.value: 0, ResponseType.GENERATE.value: 0,
                                            ResponseType.FAILURE.value: 0})
    answer = (
        f"–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:\n"
        f"–û–±—Ä–∞–±–æ—Ç–∞–Ω–æ –Ω–∞–º–µ—Ä–µ–Ω–∏–π: {stats[ResponseType.INTENT.value]}\n"
        f"–û—Ç–≤–µ—Ç–æ–≤ –∏–∑ –¥–∏–∞–ª–æ–≥–æ–≤: {stats[ResponseType.GENERATE.value]}\n"
        f"–ù–µ—É–¥–∞—á–Ω—ã—Ö –∑–∞–ø—Ä–æ—Å–æ–≤: {stats[ResponseType.FAILURE.value]}"
    )
    await update.message.reply_text(answer)

async def handle_message(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_text = update.message.text
    if not user_text:
        answer = "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ —Ç–µ–∫—Å—Ç."
        context.user_data['last_bot_response'] = answer
        await update.message.reply_text(answer)
        return
    bot = context.bot_data.setdefault('bot', Bot())
    answer = bot.process(user_text, context)
    await update.message.reply_text(answer)

async def handle_voice(update: Update, context: ContextTypes.DEFAULT_TYPE):
    voice = update.message.voice
    bot = context.bot_data.setdefault('bot', Bot())
    try:
        voice_file = await context.bot.get_file(voice.file_id)
        await voice_file.download_to_drive('voice.ogg')
        text = voice_to_text('voice.ogg')
        if text:
            answer = bot.process(text, context)
            voice_response = text_to_voice(answer)
            if voice_response:
                with open(voice_response, 'rb') as audio:
                    await update.message.reply_voice(audio)
                os.remove(voice_response)
            else:
                await update.message.reply_text(answer)
        else:
            answer = "–ù–µ —É–¥–∞–ª–æ—Å—å —Ä–∞—Å–ø–æ–∑–Ω–∞—Ç—å –≥–æ–ª–æ—Å. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â—ë —Ä–∞–∑."
            context.user_data['last_bot_response'] = answer
            await update.message.reply_text(answer)
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –≥–æ–ª–æ—Å–æ–≤–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è: {e}\n{traceback.format_exc()}")
        answer = "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞."
        context.user_data['last_bot_response'] = answer
        await update.message.reply_text(answer)
    finally:
        if os.path.exists('voice.ogg'):
            os.remove('voice.ogg')

def run_bot():
    if not TOKEN:
        raise ValueError("TELEGRAM_TOKEN –Ω–µ –Ω–∞–π–¥–µ–Ω")
    app = ApplicationBuilder().token(TOKEN).build()
    app.add_handler(CommandHandler("start", start_command))
    app.add_handler(CommandHandler("help", help_command))
    app.add_handler(CommandHandler("stats", stats_command))
    app.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, handle_message))
    app.add_handler(MessageHandler(filters.VOICE, handle_voice))
    logger.info("–ë–æ—Ç –∑–∞–ø—É—Å–∫–∞–µ—Ç—Å—è...")
    app.run_polling()

if __name__ == '__main__':
    run_bot()